# Generated by Django 4.2.17 on 2025-10-16 15:13

import apps.accounts.models.user
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={
                            "unique": "Un utilisateur avec cette adresse e-mail existe déjà."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="adresse e-mail",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("student", "Étudiant"),
                            ("teacher", "Enseignant"),
                            ("professional", "Professionnel"),
                            ("organization", "Organisation"),
                            ("admin", "Administrateur"),
                        ],
                        db_index=True,
                        default="student",
                        max_length=20,
                        verbose_name="type d'utilisateur",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro doit être un numéro ivoirien valide (ex: +2250102030405)",
                                regex="^\\+?225[0-9]{8,10}$",
                            )
                        ],
                        verbose_name="numéro de téléphone",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=apps.accounts.models.user.profile_picture_upload_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png"]
                            ),
                            apps.accounts.models.user.validate_file_size,
                        ],
                        verbose_name="photo de profil",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("abidjan", "Abidjan"),
                            ("bouake", "Bouaké"),
                            ("daloa", "Daloa"),
                            ("yamoussoukro", "Yamoussoukro"),
                            ("sanpedro", "San-Pédro"),
                            ("korhogo", "Korhogo"),
                            ("man", "Man"),
                            ("other", "Autre ville"),
                        ],
                        default="abidjan",
                        max_length=100,
                        null=True,
                        verbose_name="ville",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="Côte d'Ivoire", max_length=100, verbose_name="pays"
                    ),
                ),
                (
                    "education_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("secondary", "Secondaire"),
                            ("baccalaureate", "Baccalauréat"),
                            ("bts", "BTS"),
                            ("license", "Licence"),
                            ("master", "Master"),
                            ("phd", "Doctorat"),
                            ("other", "Autre"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="niveau d'éducation",
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="établissement d'enseignement",
                    ),
                ),
                (
                    "field_of_study",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="domaine d'étude",
                    ),
                ),
                (
                    "graduation_year",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="année de graduation prévue"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="est vérifié"),
                ),
                (
                    "verification_token",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="jeton de vérification",
                    ),
                ),
                (
                    "verification_token_expires",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiration du jeton"
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="dernière IP de connexion"
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0, verbose_name="tentatives de connexion échouées"
                    ),
                ),
                (
                    "last_failed_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="dernière tentative échouée"
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False, verbose_name="compte verrouillé"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        verbose_name="date de création",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date de mise à jour"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "utilisateur",
                "verbose_name_plural": "utilisateurs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Décrivez vos objectifs académiques/professionnels (min 30 caractères)",
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(30)],
                        verbose_name="biographie",
                    ),
                ),
                (
                    "skills",
                    models.TextField(
                        blank=True,
                        help_text="Séparées par des virgules",
                        null=True,
                        verbose_name="compétences",
                    ),
                ),
                (
                    "interests",
                    models.TextField(
                        blank=True,
                        help_text="Séparés par des virgules",
                        null=True,
                        verbose_name="centres d'intérêt",
                    ),
                ),
                (
                    "cv",
                    models.FileField(
                        blank=True,
                        help_text="Formats acceptés: PDF, DOC, DOCX (max 5MB)",
                        null=True,
                        upload_to=apps.accounts.models.user.user_cv_upload_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf", "doc", "docx"]
                            ),
                            apps.accounts.models.user.validate_file_size,
                        ],
                        verbose_name="CV",
                    ),
                ),
                (
                    "linkedin_profile",
                    models.URLField(
                        blank=True,
                        help_text="Lien vers votre profil LinkedIn",
                        null=True,
                        verbose_name="profil LinkedIn",
                    ),
                ),
                (
                    "github_profile",
                    models.URLField(
                        blank=True,
                        help_text="Lien vers votre profil GitHub",
                        null=True,
                        verbose_name="profil GitHub",
                    ),
                ),
                (
                    "portfolio_website",
                    models.URLField(
                        blank=True,
                        help_text="Lien vers votre portfolio en ligne",
                        null=True,
                        verbose_name="site portfolio",
                    ),
                ),
                (
                    "languages",
                    models.TextField(
                        default="Français",
                        help_text="Séparées par des virgules",
                        verbose_name="langues",
                    ),
                ),
                (
                    "certifications",
                    models.TextField(
                        blank=True,
                        help_text="Séparées par des virgules",
                        null=True,
                        verbose_name="certifications",
                    ),
                ),
                (
                    "availability_status",
                    models.CharField(
                        choices=[
                            ("available", "Disponible"),
                            ("limited", "Disponibilité limitée"),
                            ("unavailable", "Non disponible"),
                        ],
                        default="available",
                        max_length=50,
                        verbose_name="statut de disponibilité",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date de mise à jour"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "profil utilisateur",
                "verbose_name_plural": "profils utilisateurs",
                "indexes": [
                    models.Index(
                        fields=["skills"], name="accounts_us_skills_56b65c_idx"
                    ),
                    models.Index(
                        fields=["languages"], name="accounts_us_languag_bcb88d_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="accounts_us_email_74c8d6_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["user_type"], name="accounts_us_user_ty_b6cfc8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at"], name="accounts_us_created_4734df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["username"], name="accounts_us_usernam_c0ea66_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["city"], name="accounts_us_city_4194a5_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["education_level"], name="accounts_us_educati_829cfb_idx"
            ),
        ),
    ]
