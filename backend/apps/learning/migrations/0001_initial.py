# Generated by Django 4.2.17 on 2025-10-16 15:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("credibility", "0001_initial"),
        ("opportunities", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.CharField(max_length=255, verbose_name="réponse")),
                (
                    "is_correct",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="correcte"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
            ],
            options={
                "verbose_name": "réponse",
                "verbose_name_plural": "réponses",
                "db_table": "learning_answers",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="nom"),
                ),
                (
                    "slug",
                    models.SlugField(blank=True, unique=True, verbose_name="slug"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Nom de l'icône (ex: code, design)",
                        max_length=50,
                        verbose_name="icône",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Ordre d'affichage", verbose_name="ordre"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
            ],
            options={
                "verbose_name": "catégorie",
                "verbose_name_plural": "catégories",
                "db_table": "learning_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="titre")),
                (
                    "slug",
                    models.SlugField(blank=True, unique=True, verbose_name="slug"),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "instructor",
                    models.CharField(max_length=255, verbose_name="formateur"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(verbose_name="durée (minutes)"),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="beginner",
                        max_length=15,
                        verbose_name="difficulté",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=1, verbose_name="ordre")),
                (
                    "is_published",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="publié"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
            ],
            options={
                "verbose_name": "cours",
                "verbose_name_plural": "cours",
                "db_table": "learning_courses",
                "ordering": ["formation", "order"],
            },
        ),
        migrations.CreateModel(
            name="JourneyModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(verbose_name="ordre")),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("critical", "Critique"),
                            ("high", "Haute"),
                            ("medium", "Moyenne"),
                            ("low", "Basse"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="priorité",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(default=True, verbose_name="obligatoire"),
                ),
                (
                    "started",
                    models.BooleanField(default=False, verbose_name="commencé"),
                ),
                (
                    "completed",
                    models.BooleanField(default=False, verbose_name="complété"),
                ),
                (
                    "time_spent_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="temps passé (minutes)"
                    ),
                ),
                (
                    "attempts",
                    models.PositiveIntegerField(default=0, verbose_name="tentatives"),
                ),
                (
                    "best_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="meilleur score",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="commencé le"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="complété le"
                    ),
                ),
            ],
            options={
                "verbose_name": "module de parcours",
                "verbose_name_plural": "modules de parcours",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="titre")),
                ("slug", models.SlugField(blank=True, verbose_name="slug")),
                ("content", models.TextField(verbose_name="contenu")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("video", "Vidéo"),
                            ("article", "Article"),
                            ("quiz", "Quiz"),
                            ("exercise", "Exercice"),
                            ("project", "Projet"),
                        ],
                        default="video",
                        max_length=10,
                        verbose_name="type",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, null=True, verbose_name="URL vidéo"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="durée (minutes)"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=1, verbose_name="ordre")),
                (
                    "is_published",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="publié"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="learning.course",
                        verbose_name="cours",
                    ),
                ),
            ],
            options={
                "verbose_name": "leçon",
                "verbose_name_plural": "leçons",
                "db_table": "learning_lessons",
                "ordering": ["course", "order"],
            },
        ),
        migrations.CreateModel(
            name="MicroLearningModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Titre")),
                (
                    "slug",
                    models.SlugField(blank=True, unique=True, verbose_name="Slug"),
                ),
                (
                    "skill_taught",
                    models.CharField(
                        db_index=True,
                        max_length=100,
                        verbose_name="Compétence enseignée",
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("video", "Vidéo tutoriel"),
                            ("interactive", "Exercice interactif"),
                            ("quiz", "Quiz évaluation"),
                            ("reading", "Lecture guidée"),
                            ("project", "Projet pratique"),
                            ("simulation", "Simulation professionnelle"),
                        ],
                        max_length=20,
                        verbose_name="Type de contenu",
                    ),
                ),
                (
                    "content_data",
                    models.JSONField(
                        default=dict,
                        help_text="Structure JSON selon le type de contenu",
                        verbose_name="Données du contenu",
                    ),
                ),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name="Durée (minutes)",
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                        ],
                        default="intermediate",
                        max_length=20,
                        verbose_name="Niveau de difficulté",
                    ),
                ),
                (
                    "learning_objectives",
                    models.JSONField(
                        default=list,
                        help_text="Liste des objectifs pédagogiques",
                        verbose_name="Objectifs d'apprentissage",
                    ),
                ),
                (
                    "video_480p_url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Vidéo 480p (4G)"
                    ),
                ),
                (
                    "video_720p_url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Vidéo 720p (5G)"
                    ),
                ),
                (
                    "video_1080p_url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Vidéo 1080p (WiFi)"
                    ),
                ),
                (
                    "estimated_data_mb",
                    models.IntegerField(
                        default=10,
                        help_text="Consommation data moyenne",
                        verbose_name="Data estimée (MB)",
                    ),
                ),
                (
                    "offline_capable",
                    models.BooleanField(
                        default=False,
                        help_text="Le module peut être téléchargé pour usage offline",
                        verbose_name="Disponible hors-ligne",
                    ),
                ),
                (
                    "local_examples",
                    models.BooleanField(
                        default=True,
                        help_text="Utilise des exemples ivoiriens/africains",
                        verbose_name="Exemples locaux",
                    ),
                ),
                (
                    "local_context_description",
                    models.TextField(
                        blank=True,
                        help_text="Ex: Cas pratique avec une entreprise ivoirienne",
                        verbose_name="Description contexte local",
                    ),
                ),
                (
                    "language",
                    models.CharField(default="fr", max_length=5, verbose_name="Langue"),
                ),
                (
                    "uses_ivorian_scenarios",
                    models.BooleanField(
                        default=True, verbose_name="Scénarios ivoiriens"
                    ),
                ),
                (
                    "points_reward",
                    models.IntegerField(
                        default=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Points récompense",
                    ),
                ),
                (
                    "total_completions",
                    models.IntegerField(default=0, verbose_name="Complétions totales"),
                ),
                (
                    "average_score",
                    models.FloatField(default=0.0, verbose_name="Score moyen"),
                ),
                (
                    "average_time_minutes",
                    models.IntegerField(default=0, verbose_name="Temps moyen (min)"),
                ),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="% d'utilisateurs ayant réussi (>70%)",
                        verbose_name="Taux de réussite",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="Actif"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                (
                    "order_in_skill",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Ordre recommandé d'apprentissage",
                        verbose_name="Ordre dans compétence",
                    ),
                ),
                (
                    "badge_unlocked",
                    models.ForeignKey(
                        blank=True,
                        help_text="Badge obtenu après complétion",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="credibility.badge",
                        verbose_name="Badge débloqué",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_modules",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        related_name="unlocks",
                        to="learning.microlearningmodule",
                        verbose_name="Prérequis",
                    ),
                ),
            ],
            options={
                "verbose_name": "Module Micro-Learning",
                "verbose_name_plural": "Modules Micro-Learning",
                "ordering": ["skill_taught", "difficulty_level", "order_in_skill"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(verbose_name="question")),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Facile"),
                            ("medium", "Moyen"),
                            ("hard", "Difficile"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="difficulté",
                    ),
                ),
                (
                    "points",
                    models.PositiveIntegerField(default=1, verbose_name="points"),
                ),
                (
                    "explanation",
                    models.TextField(blank=True, verbose_name="explication"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="learning.lesson",
                        verbose_name="leçon",
                    ),
                ),
            ],
            options={
                "verbose_name": "question",
                "verbose_name_plural": "questions",
                "db_table": "learning_questions",
            },
        ),
        migrations.CreateModel(
            name="UserProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="complété"
                    ),
                ),
                (
                    "completion_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="date de complétion"
                    ),
                ),
                (
                    "last_position_seconds",
                    models.PositiveIntegerField(
                        default=0, verbose_name="dernière position (secondes)"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="learning.lesson",
                        verbose_name="leçon",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_progress",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "progression utilisateur",
                "verbose_name_plural": "progressions utilisateurs",
                "db_table": "learning_user_progress",
            },
        ),
        migrations.CreateModel(
            name="UserModuleProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Pas commencé"),
                            ("in_progress", "En cours"),
                            ("completed", "Terminé"),
                            ("needs_review", "À revoir"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("progress_percentage", models.IntegerField(default=0)),
                ("attempts", models.IntegerField(default=0)),
                ("best_score", models.FloatField(blank=True, null=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning.microlearningmodule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Progression Module",
                "verbose_name_plural": "Progressions Modules",
            },
        ),
        migrations.CreateModel(
            name="UserAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="correcte"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "answer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_selections",
                        to="learning.answer",
                        verbose_name="réponse",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_answers",
                        to="learning.question",
                        verbose_name="question",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "réponse utilisateur",
                "verbose_name_plural": "réponses utilisateurs",
                "db_table": "learning_user_answers",
            },
        ),
        migrations.CreateModel(
            name="PersonalizedLearningJourney",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Pas commencé"),
                            ("in_progress", "En cours"),
                            ("completed", "Terminé"),
                            ("paused", "En pause"),
                            ("abandoned", "Abandonné"),
                        ],
                        default="not_started",
                        max_length=20,
                        verbose_name="statut",
                    ),
                ),
                (
                    "user_current_level",
                    models.JSONField(
                        default=dict,
                        help_text='Format: {"Python": 0.7, "Communication": 0.5, ...}',
                        verbose_name="niveau actuel utilisateur",
                    ),
                ),
                (
                    "skill_gaps",
                    models.JSONField(
                        default=list,
                        help_text="Liste des compétences à développer avec priorités",
                        verbose_name="écarts de compétences",
                    ),
                ),
                (
                    "total_estimated_hours",
                    models.PositiveIntegerField(
                        default=0, verbose_name="heures totales estimées"
                    ),
                ),
                (
                    "hours_completed",
                    models.FloatField(default=0.0, verbose_name="heures complétées"),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="pourcentage de progression",
                    ),
                ),
                (
                    "modules_completed",
                    models.PositiveIntegerField(
                        default=0, verbose_name="modules complétés"
                    ),
                ),
                (
                    "success_probability",
                    models.FloatField(
                        default=0.5,
                        help_text="Estimation IA de réussite pour l'opportunité",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="probabilité de succès",
                    ),
                ),
                (
                    "estimated_completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="date de complétion estimée"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="commencé le"
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="dernière activité"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="complété le"
                    ),
                ),
                (
                    "learning_modules",
                    models.ManyToManyField(
                        related_name="journeys",
                        through="learning.JourneyModule",
                        to="learning.microlearningmodule",
                        verbose_name="modules d'apprentissage",
                    ),
                ),
                (
                    "target_opportunity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_journeys",
                        to="opportunities.opportunity",
                        verbose_name="opportunité cible",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_journeys",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "parcours d'apprentissage",
                "verbose_name_plural": "parcours d'apprentissage",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OpportunityIntelligence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "extracted_skills",
                    models.JSONField(
                        default=dict,
                        help_text='Format: {"technical": [...], "soft": [...], "tools": [...], "languages": [...]}',
                        verbose_name="compétences extraites",
                    ),
                ),
                (
                    "difficulty_score",
                    models.FloatField(
                        default=0.5,
                        help_text="0 = Très facile, 1 = Très difficile",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="score de difficulté",
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="intermediate",
                        max_length=20,
                        verbose_name="niveau de difficulté",
                    ),
                ),
                (
                    "estimated_preparation_hours",
                    models.PositiveIntegerField(
                        default=10, verbose_name="heures de préparation estimées"
                    ),
                ),
                (
                    "typical_salary_range_fcfa",
                    models.CharField(
                        blank=True,
                        help_text="Ex: 200000-400000",
                        max_length=100,
                        verbose_name="fourchette salariale (FCFA)",
                    ),
                ),
                (
                    "market_demand",
                    models.CharField(
                        choices=[
                            ("very_high", "Très demandé"),
                            ("high", "Demandé"),
                            ("moderate", "Modéré"),
                            ("low", "Faible"),
                        ],
                        default="moderate",
                        max_length=20,
                        verbose_name="demande du marché",
                    ),
                ),
                (
                    "growth_sectors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Secteurs connexes en forte demande",
                        verbose_name="secteurs en croissance",
                    ),
                ),
                (
                    "companies_hiring",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Liste des entreprises similaires qui embauchent",
                        verbose_name="entreprises qui recrutent",
                    ),
                ),
                (
                    "success_factors",
                    models.JSONField(
                        default=list,
                        help_text="Ce qui fait réussir les candidats pour ce type de poste",
                        verbose_name="facteurs de succès",
                    ),
                ),
                (
                    "common_interview_questions",
                    models.JSONField(
                        default=list,
                        help_text="Questions fréquemment posées pour ce type de poste",
                        verbose_name="questions d'entretien courantes",
                    ),
                ),
                (
                    "analysis_confidence",
                    models.FloatField(
                        default=0.0,
                        help_text="Score de confiance de l'IA (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="confiance de l'analyse",
                    ),
                ),
                (
                    "analyzed_at",
                    models.DateTimeField(auto_now=True, verbose_name="analysé le"),
                ),
                (
                    "analysis_version",
                    models.CharField(
                        default="1.0",
                        max_length=10,
                        verbose_name="version de l'analyse",
                    ),
                ),
                (
                    "needs_reanalysis",
                    models.BooleanField(
                        default=False,
                        help_text="Marqué si l'opportunité a été modifiée",
                        verbose_name="nécessite réanalyse",
                    ),
                ),
                (
                    "opportunity",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="intelligence",
                        to="opportunities.opportunity",
                        verbose_name="opportunité",
                    ),
                ),
            ],
            options={
                "verbose_name": "intelligence d'opportunité",
                "verbose_name_plural": "intelligences d'opportunités",
                "ordering": ["-analyzed_at"],
            },
        ),
        migrations.CreateModel(
            name="LearningPathTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "skill_name",
                    models.CharField(
                        max_length=100, verbose_name="nom de la compétence"
                    ),
                ),
                (
                    "target_opportunity_type",
                    models.CharField(
                        choices=[
                            ("scholarship", "Bourse"),
                            ("internship", "Stage"),
                            ("job", "Emploi"),
                            ("competition", "Concours"),
                            ("training", "Formation"),
                        ],
                        max_length=20,
                        verbose_name="type d'opportunité cible",
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(
                        default=2, verbose_name="heures estimées"
                    ),
                ),
                (
                    "difficulty",
                    models.FloatField(
                        default=0.5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="difficulté",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("critical", "Critique"),
                            ("high", "Haute"),
                            ("medium", "Moyenne"),
                            ("low", "Basse"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="priorité",
                    ),
                ),
                (
                    "recommended_modules",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="IDs ou slugs des modules MicroLearning",
                        verbose_name="modules recommandés",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "template de parcours",
                "verbose_name_plural": "templates de parcours",
                "ordering": ["-priority", "skill_name"],
                "unique_together": {("skill_name", "target_opportunity_type")},
            },
        ),
        migrations.AddField(
            model_name="journeymodule",
            name="journey",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="journey_modules",
                to="learning.personalizedlearningjourney",
                verbose_name="parcours",
            ),
        ),
        migrations.AddField(
            model_name="journeymodule",
            name="module",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="journey_assignments",
                to="learning.microlearningmodule",
                verbose_name="module",
            ),
        ),
        migrations.CreateModel(
            name="Formation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="titre")),
                (
                    "slug",
                    models.SlugField(blank=True, unique=True, verbose_name="slug"),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "short_description",
                    models.CharField(
                        blank=True,
                        help_text="Résumé en une phrase",
                        max_length=200,
                        verbose_name="description courte",
                    ),
                ),
                (
                    "instructor",
                    models.CharField(max_length=255, verbose_name="formateur"),
                ),
                (
                    "instructor_bio",
                    models.TextField(blank=True, verbose_name="bio formateur"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="formations/images/",
                        verbose_name="image",
                    ),
                ),
                (
                    "video_trailer_url",
                    models.URLField(blank=True, verbose_name="URL trailer vidéo"),
                ),
                ("start_date", models.DateTimeField(verbose_name="date de début")),
                ("end_date", models.DateTimeField(verbose_name="date de fin")),
                (
                    "location",
                    models.CharField(blank=True, max_length=255, verbose_name="lieu"),
                ),
                (
                    "is_online",
                    models.BooleanField(default=False, verbose_name="en ligne"),
                ),
                (
                    "meeting_url",
                    models.URLField(
                        blank=True,
                        help_text="Lien Zoom/Teams",
                        verbose_name="URL réunion",
                    ),
                ),
                (
                    "is_free",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="gratuit"
                    ),
                ),
                (
                    "price_fcfa",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Prix en francs CFA",
                        null=True,
                        verbose_name="prix (FCFA)",
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="participants maximum"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("all", "Tous niveaux"),
                        ],
                        default="beginner",
                        max_length=20,
                        verbose_name="niveau",
                    ),
                ),
                (
                    "duration_hours",
                    models.PositiveIntegerField(
                        default=10, verbose_name="durée (heures)"
                    ),
                ),
                (
                    "certificate_delivered",
                    models.BooleanField(
                        default=True, verbose_name="certificat délivré"
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(
                        blank=True,
                        help_text="Compétences requises avant de commencer",
                        verbose_name="prérequis",
                    ),
                ),
                (
                    "learning_objectives",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Liste des objectifs à atteindre",
                        verbose_name="objectifs pédagogiques",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Brouillon"),
                            ("upcoming", "À venir"),
                            ("ongoing", "En cours"),
                            ("completed", "Terminée"),
                            ("canceled", "Annulée"),
                        ],
                        db_index=True,
                        default="draft",
                        max_length=20,
                        verbose_name="statut",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="active"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="mise en avant"),
                ),
                (
                    "total_enrollments",
                    models.PositiveIntegerField(
                        default=0, verbose_name="inscriptions totales"
                    ),
                ),
                (
                    "average_rating",
                    models.FloatField(default=0.0, verbose_name="note moyenne"),
                ),
                (
                    "completion_rate",
                    models.FloatField(default=0.0, verbose_name="taux de complétion"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="modifié le"),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="publié le"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="formations",
                        to="learning.category",
                        verbose_name="catégorie",
                    ),
                ),
            ],
            options={
                "verbose_name": "formation",
                "verbose_name_plural": "formations",
                "db_table": "learning_formations",
                "ordering": ["-start_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("approved", "Approuvée"),
                            ("rejected", "Rejetée"),
                            ("canceled", "Annulée"),
                            ("completed", "Terminée"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                        verbose_name="statut",
                    ),
                ),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="pourcentage de complétion",
                    ),
                ),
                (
                    "modules_completed",
                    models.PositiveIntegerField(
                        default=0, verbose_name="modules complétés"
                    ),
                ),
                (
                    "time_spent_hours",
                    models.FloatField(default=0.0, verbose_name="temps passé (heures)"),
                ),
                (
                    "certificate_issued",
                    models.BooleanField(default=False, verbose_name="certificat émis"),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="numéro certificat",
                    ),
                ),
                (
                    "certificate_issued_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="certificat émis le"
                    ),
                ),
                ("feedback", models.TextField(blank=True, verbose_name="commentaire")),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="note",
                    ),
                ),
                (
                    "rated_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="noté le"),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("completed", "Payé"),
                            ("failed", "Échoué"),
                            ("refunded", "Remboursé"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="statut paiement",
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="référence paiement"
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date d'inscription"
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="approuvé le"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="terminé le"
                    ),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(auto_now=True, verbose_name="dernier accès"),
                ),
                (
                    "formation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="learning.formation",
                        verbose_name="formation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="formation_enrollments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "inscription",
                "verbose_name_plural": "inscriptions",
                "db_table": "learning_enrollments",
                "ordering": ["-enrollment_date"],
            },
        ),
        migrations.AddField(
            model_name="course",
            name="formation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="courses",
                to="learning.formation",
                verbose_name="formation",
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["is_active", "order"], name="learning_ca_is_acti_d9fdb8_idx"
            ),
        ),
        migrations.AddField(
            model_name="answer",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="answers",
                to="learning.question",
                verbose_name="question",
            ),
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["user", "completed"], name="learning_us_user_id_d4ee4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userprogress",
            index=models.Index(
                fields=["lesson", "user"], name="learning_us_lesson__e1d0e6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userprogress",
            unique_together={("user", "lesson")},
        ),
        migrations.AddIndex(
            model_name="usermoduleprogress",
            index=models.Index(
                fields=["user", "status"], name="learning_us_user_id_cce076_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usermoduleprogress",
            unique_together={("user", "module")},
        ),
        migrations.AddIndex(
            model_name="useranswer",
            index=models.Index(
                fields=["user", "is_correct"], name="learning_us_user_id_e41dd7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useranswer",
            index=models.Index(
                fields=["question", "is_correct"], name="learning_us_questio_e32c9c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="useranswer",
            unique_together={("user", "question")},
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["lesson"], name="learning_qu_lesson__7e7905_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personalizedlearningjourney",
            index=models.Index(
                fields=["user", "status"], name="learning_pe_user_id_ce95f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personalizedlearningjourney",
            index=models.Index(
                fields=["status", "created_at"], name="learning_pe_status_c0f968_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="personalizedlearningjourney",
            unique_together={("user", "target_opportunity")},
        ),
        migrations.AddIndex(
            model_name="opportunityintelligence",
            index=models.Index(
                fields=["difficulty_level"], name="learning_op_difficu_2a13b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="opportunityintelligence",
            index=models.Index(
                fields=["market_demand"], name="learning_op_market__1e60af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="opportunityintelligence",
            index=models.Index(
                fields=["analyzed_at"], name="learning_op_analyze_fadbf2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="microlearningmodule",
            index=models.Index(
                fields=["skill_taught", "difficulty_level"],
                name="learning_mi_skill_t_ea2665_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="microlearningmodule",
            index=models.Index(
                fields=["content_type", "is_active"],
                name="learning_mi_content_12b0e7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="microlearningmodule",
            index=models.Index(
                fields=["is_active", "-total_completions"],
                name="learning_mi_is_acti_092978_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(
                fields=["course", "is_published"], name="learning_le_course__b263ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lesson",
            index=models.Index(fields=["type"], name="learning_le_type_7d0d6f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("course", "order")},
        ),
        migrations.AlterUniqueTogether(
            name="journeymodule",
            unique_together={("journey", "module")},
        ),
        migrations.AddIndex(
            model_name="formation",
            index=models.Index(
                fields=["status", "is_active"], name="learning_fo_status_f23ebb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="formation",
            index=models.Index(
                fields=["is_free", "is_active"], name="learning_fo_is_free_f27ee2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="formation",
            index=models.Index(
                fields=["category", "status"], name="learning_fo_categor_cde848_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="formation",
            index=models.Index(
                fields=["-start_date"], name="learning_fo_start_d_a6b40a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["user", "status"], name="learning_en_user_id_675cc6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["formation", "status"], name="learning_en_formati_01e5ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["status", "-enrollment_date"],
                name="learning_en_status_bd688d_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together={("user", "formation")},
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["is_published", "formation"],
                name="learning_co_is_publ_8223d1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="course",
            index=models.Index(
                fields=["formation", "order"], name="learning_co_formati_485611_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="course",
            unique_together={("formation", "order")},
        ),
        migrations.AddIndex(
            model_name="answer",
            index=models.Index(
                fields=["question", "is_correct"], name="learning_an_questio_95c180_idx"
            ),
        ),
    ]
