"""
OpportuCI - Learning Admin Interface
=====================================
Interface d'administration pour le syst√®me d'apprentissage
"""
from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

from apps.learning.models import (
    OpportunityIntelligence,
    MicroLearningModule,
    PersonalizedLearningJourney,
    JourneyModule,
    UserModuleProgress
)


@admin.register(OpportunityIntelligence)
class OpportunityIntelligenceAdmin(admin.ModelAdmin):
    list_display = (
        'opportunity_link',
        'difficulty_badge',
        'estimated_hours',
        'market_demand_badge',
        'analysis_confidence',
        'analyzed_at'
    )
    list_filter = ('difficulty_score', 'market_demand', 'analyzed_at')
    search_fields = ('opportunity__title', 'opportunity__organization')
    readonly_fields = (
        'opportunity',
        'extracted_skills_display',
        'difficulty_score',
        'estimated_preparation_hours',
        'typical_salary_range_fcfa',
        'market_demand',
        'analyzed_at',
        'analysis_confidence'
    )
    
    fieldsets = (
        ('Opportunit√©', {
            'fields': ('opportunity',)
        }),
        ('Analyse des Comp√©tences', {
            'fields': ('extracted_skills_display', 'difficulty_score')
        }),
        ('M√©triques', {
            'fields': (
                'estimated_preparation_hours',
                'typical_salary_range_fcfa',
                'market_demand'
            )
        }),
        ('M√©tadonn√©es', {
            'fields': ('analyzed_at', 'analysis_confidence')
        }),
    )
    
    def opportunity_link(self, obj):
        url = reverse('admin:opportunities_opportunity_change', args=[obj.opportunity.id])
        return format_html('<a href="{}">{}</a>', url, obj.opportunity.title)
    opportunity_link.short_description = 'Opportunit√©'
    
    def difficulty_badge(self, obj):
        colors = {
            (0, 0.4): 'green',
            (0.4, 0.7): 'orange',
            (0.7, 1.1): 'red'
        }
        color = next(c for (low, high), c in colors.items() if low <= obj.difficulty_score < high)
        level = 'Facile' if obj.difficulty_score < 0.4 else 'Moyen' if obj.difficulty_score < 0.7 else 'Difficile'
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 10px; border-radius: 3px;">{}</span>',
            color, level
        )
    difficulty_badge.short_description = 'Difficult√©'
    
    def market_demand_badge(self, obj):
        colors = {
            'very_high': 'darkgreen',
            'high': 'green',
            'moderate': 'orange',
            'low': 'red'
        }
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 10px; border-radius: 3px;">{}</span>',
            colors.get(obj.market_demand, 'gray'),
            obj.get_market_demand_display()
        )
    market_demand_badge.short_description = 'Demande March√©'
    
    def estimated_hours(self, obj):
        return f"{obj.estimated_preparation_hours}h"
    estimated_hours.short_description = 'Pr√©paration'
    
    def extracted_skills_display(self, obj):
        html = ""
        for category, skills in obj.extracted_skills.items():
            html += f"<strong>{category.upper()}:</strong><br>"
            html += "<ul>"
            for skill in skills:
                html += f"<li>{skill}</li>"
            html += "</ul>"
        return mark_safe(html)
    extracted_skills_display.short_description = 'Comp√©tences Extraites'
    
    actions = ['reanalyze_opportunities']
    
    def reanalyze_opportunities(self, request, queryset):
        """Relance l'analyse pour les opportunit√©s s√©lectionn√©es"""
        for intelligence in queryset:
            intelligence.analyze_with_gemini()
        self.message_user(request, f"{queryset.count()} opportunit√©s r√©analys√©es avec succ√®s")
    reanalyze_opportunities.short_description = "R√©analyser avec IA"


@admin.register(MicroLearningModule)
class MicroLearningModuleAdmin(admin.ModelAdmin):
    list_display = (
        'title',
        'skill_taught',
        'content_type_badge',
        'duration_badge',
        'difficulty_badge',
        'stats_display',
        'is_active'
    )
    list_filter = ('content_type', 'difficulty_level', 'is_active', 'local_examples')
    search_fields = ('title', 'skill_taught', 'description')
    readonly_fields = (
        'slug',
        'total_completions',
        'average_score',
        'average_time_minutes',
        'success_rate',
        'created_at',
        'updated_at'
    )
    
    fieldsets = (
        ('Informations G√©n√©rales', {
            'fields': ('title', 'slug', 'skill_taught', 'description')
        }),
        ('Contenu', {
            'fields': (
                'content_type',
                'content_data',
                'duration_minutes',
                'difficulty_level'
            )
        }),
        ('Optimisation R√©seau', {
            'fields': (
                'video_quality_480p_url',
                'video_quality_720p_url',
                'estimated_data_mb',
                'offline_capable'
            )
        }),
        ('Contexte Local', {
            'fields': (
                'local_examples',
                'local_context_description',
                'language',
                'uses_ivorian_scenarios'
            )
        }),
        ('Gamification', {
            'fields': ('points_reward', 'badge_unlocked')
        }),
        ('Statistiques', {
            'fields': (
                'total_completions',
                'average_score',
                'average_time_minutes',
                'success_rate'
            )
        }),
        ('M√©tadonn√©es', {
            'fields': ('is_active', 'created_at', 'updated_at')
        })
    )
    
    def content_type_badge(self, obj):
        icons = {
            'video': 'üé•',
            'interactive': 'üíª',
            'quiz': 'üìù',
            'reading': 'üìñ',
            'project': 'üéØ',
            'simulation': 'üéÆ'
        }
        return f"{icons.get(obj.content_type, 'üìÑ')} {obj.get_content_type_display()}"
    content_type_badge.short_description = 'Type'
    
    def duration_badge(self, obj):
        color = 'green' if obj.duration_minutes <= 10 else 'orange' if obj.duration_minutes <= 20 else 'red'
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}min</span>',
            color, obj.duration_minutes
        )
    duration_badge.short_description = 'Dur√©e'
    
    def difficulty_badge(self, obj):
        colors = {'beginner': 'green', 'intermediate': 'orange', 'advanced': 'red'}
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 10px; border-radius: 3px;">{}</span>',
            colors.get(obj.difficulty_level, 'gray'),
            obj.get_difficulty_level_display()
        )
    difficulty_badge.short_description = 'Niveau'
    
    def stats_display(self, obj):
        return format_html(
            '‚úÖ {} | ‚≠ê {}% | ‚è±Ô∏è {}min',
            obj.total_completions,
            int(obj.average_score),
            obj.average_time_minutes
        )
    stats_display.short_description = 'Statistiques'


@admin.register(PersonalizedLearningJourney)
class PersonalizedLearningJourneyAdmin(admin.ModelAdmin):
    list_display = (
        'user_link',
        'opportunity_short',
        'status_badge',
        'progress_bar',
        'success_probability_badge',
        'created_at'
    )
    list_filter = ('status', 'created_at')
    search_fields = ('user__email', 'user__username', 'target_opportunity__title')
    readonly_fields = (
        'user',
        'target_opportunity',
        'user_current_level',
        'skill_gaps_display',
        'progress_percentage',
        'success_probability',
        'created_at',
        'started_at',
        'completed_at',
        'last_activity'
    )
    
    fieldsets = (
        ('Utilisateur & Opportunit√©', {
            'fields': ('user', 'target_opportunity')
        }),
        ('Analyse', {
            'fields': ('user_current_level', 'skill_gaps_display')
        }),
        ('Progression', {
            'fields': (
                'status',
                'progress_percentage',
                'total_estimated_hours',
                'hours_completed'
            )
        }),
        ('Pr√©dictions', {
            'fields': ('success_probability', 'estimated_completion_date')
        }),
        ('Dates', {
            'fields': ('created_at', 'started_at', 'last_activity', 'completed_at')
        })
    )
    
    def user_link(self, obj):
        url = reverse('admin:accounts_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.get_full_name() or obj.user.username)
    user_link.short_description = 'Utilisateur'
    
    def opportunity_short(self, obj):
        return f"{obj.target_opportunity.title[:40]}..."
    opportunity_short.short_description = 'Opportunit√©'
    
    def status_badge(self, obj):
        colors = {
            'not_started': 'gray',
            'in_progress': 'blue',
            'completed': 'green',
            'paused': 'orange'
        }
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 10px; border-radius: 3px;">{}</span>',
            colors.get(obj.status, 'gray'),
            obj.get_status_display()
        )
    status_badge.short_description = 'Statut'
    
    def progress_bar(self, obj):
        return format_html(
            '<div style="width: 100px; background-color: #f0f0f0; border-radius: 5px;">'
            '<div style="width: {}%; background-color: #4CAF50; height: 20px; border-radius: 5px; text-align: center; color: white; font-size: 12px;">'
            '{}%'
            '</div></div>',
            obj.progress_percentage, obj.progress_percentage
        )
    progress_bar.short_description = 'Progression'
    
    def success_probability_badge(self, obj):
        prob_pct = int(obj.success_probability * 100)
        color = 'green' if prob_pct >= 75 else 'orange' if prob_pct >= 50 else 'red'
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}%</span>',
            color, prob_pct
        )
    success_probability_badge.short_description = 'Probabilit√© Succ√®s'
    
    def skill_gaps_display(self, obj):
        if not obj.skill_gaps:
            return "Aucun gap d√©tect√©"
        
        html = "<ul>"
        for gap in obj.skill_gaps[:5]:  # Top 5
            priority_colors = {
                'critical': 'red',
                'high': 'orange',
                'medium': 'blue',
                'low': 'gray'
            }
            color = priority_colors.get(gap.get('priority', 'medium'), 'gray')
            html += f"<li><span style='color: {color}; font-weight: bold;'>[{gap.get('priority', '').upper()}]</span> "
            html += f"{gap.get('skill', '')} (Gap: {int(gap.get('gap', 0) * 100)}%)</li>"
        
        if len(obj.skill_gaps) > 5:
            html += f"<li><em>... et {len(obj.skill_gaps) - 5} autres</em></li>"
        html += "</ul>"
        
        return mark_safe(html)
    skill_gaps_display.short_description = 'Gaps de Comp√©tences'


@admin.register(JourneyModule)
class JourneyModuleAdmin(admin.ModelAdmin):
    list_display = (
        'journey_short',
        'module_link',
        'order',
        'priority_badge',
        'status_display',
        'completion_time',
        'best_score'
    )
    list_filter = ('priority', 'is_mandatory', 'started', 'completed')
    search_fields = ('journey__user__email', 'module__title')
    readonly_fields = (
        'journey',
        'module',
        'started_at',
        'completed_at'
    )
    
    fieldsets = (
        ('Relations', {
            'fields': ('journey', 'module')
        }),
        ('Configuration', {
            'fields': ('order', 'priority', 'is_mandatory')
        }),
        ('Progression', {
            'fields': (
                'started',
                'completed',
                'time_spent_minutes',
                'attempts',
                'best_score'
            )
        }),
        ('Dates', {
            'fields': ('started_at', 'completed_at')
        })
    )
    
    def journey_short(self, obj):
        return f"{obj.journey.user.username} ‚Üí {obj.journey.target_opportunity.title[:30]}..."
    journey_short.short_description = 'Parcours'
    
    def module_link(self, obj):
        url = reverse('admin:learning_microlearningmodule_change', args=[obj.module.id])
        return format_html('<a href="{}">{}</a>', url, obj.module.title)
    module_link.short_description = 'Module'
    
    def priority_badge(self, obj):
        colors = {
            'critical': 'red',
            'high': 'orange',
            'medium': 'blue',
            'low': 'gray'
        }
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; border-radius: 3px; font-size: 11px;">{}</span>',
            colors.get(obj.priority, 'gray'),
            obj.get_priority_display().upper()
        )
    priority_badge.short_description = 'Priorit√©'
    
    def status_display(self, obj):
        if obj.completed:
            return format_html('<span style="color: green;">‚úÖ Compl√©t√©</span>')
        elif obj.started:
            return format_html('<span style="color: blue;">üîÑ En cours</span>')
        else:
            return format_html('<span style="color: gray;">‚è∏Ô∏è Pas commenc√©</span>')
    status_display.short_description = 'Statut'
    
    def completion_time(self, obj):
        if obj.time_spent_minutes:
            hours = obj.time_spent_minutes // 60
            minutes = obj.time_spent_minutes % 60
            return f"{hours}h{minutes:02d}m"
        return "-"
    completion_time.short_description = 'Temps Pass√©'


@admin.register(UserModuleProgress)
class UserModuleProgressAdmin(admin.ModelAdmin):
    list_display = (
        'user_link',
        'module_short',
        'status_badge',
        'progress_bar',
        'score_display',
        'attempts',
        'last_accessed'
    )
    list_filter = ('status', 'completed_at', 'started_at')
    search_fields = ('user__email', 'user__username', 'module__title')
    readonly_fields = (
        'user',
        'module',
        'started_at',
        'completed_at',
        'last_accessed'
    )
    
    fieldsets = (
        ('Utilisateur & Module', {
            'fields': ('user', 'module')
        }),
        ('Progression', {
            'fields': (
                'status',
                'progress_percentage',
                'attempts',
                'time_spent_minutes'
            )
        }),
        ('Scores', {
            'fields': ('best_score', 'last_score')
        }),
        ('Feedback', {
            'fields': ('ai_feedback', 'user_notes')
        }),
        ('M√©tadonn√©es', {
            'fields': ('started_at', 'last_accessed', 'completed_at')
        })
    )
    
    def user_link(self, obj):
        url = reverse('admin:accounts_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = 'Utilisateur'
    
    def module_short(self, obj):
        return f"{obj.module.title[:40]}..."
    module_short.short_description = 'Module'
    
    def status_badge(self, obj):
        colors = {
            'not_started': 'gray',
            'in_progress': 'blue',
            'completed': 'green',
            'needs_review': 'orange'
        }
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 10px; border-radius: 3px;">{}</span>',
            colors.get(obj.status, 'gray'),
            obj.get_status_display()
        )
    status_badge.short_description = 'Statut'
    
    def progress_bar(self, obj):
        return format_html(
            '<div style="width: 80px; background-color: #f0f0f0; border-radius: 5px;">'
            '<div style="width: {}%; background-color: #2196F3; height: 18px; border-radius: 5px; text-align: center; color: white; font-size: 11px; line-height: 18px;">'
            '{}%'
            '</div></div>',
            obj.progress_percentage, obj.progress_percentage
        )
    progress_bar.short_description = 'Progression'
    
    def score_display(self, obj):
        if obj.best_score is not None:
            color = 'green' if obj.best_score >= 80 else 'orange' if obj.best_score >= 60 else 'red'
            return format_html(
                '<span style="color: {}; font-weight: bold;">{:.1f}%</span>',
                color, obj.best_score
            )
        return "-"
    score_display.short_description = 'Meilleur Score'