# Generated by Django 4.2.17 on 2025-10-16 23:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("opportunities", "0001_initial"),
        ("learning", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProfessionalTaskSimulation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="titre")),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("excel_analysis", "Analyse Excel"),
                            ("presentation", "Présentation PowerPoint"),
                            ("email_writing", "Rédaction email professionnel"),
                            ("customer_service", "Service client"),
                            ("project_planning", "Planification projet"),
                            ("data_entry", "Saisie de données"),
                            ("social_media", "Gestion réseaux sociaux"),
                            ("coding_challenge", "Défi de code"),
                        ],
                        max_length=30,
                        verbose_name="type de tâche",
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "scenario",
                    models.TextField(
                        help_text="Contexte de la tâche (entreprise ivoirienne fictive)",
                        verbose_name="scénario",
                    ),
                ),
                (
                    "company_context",
                    models.JSONField(
                        default=dict,
                        help_text="Nom entreprise, secteur, ton rôle, etc.",
                        verbose_name="contexte entreprise",
                    ),
                ),
                (
                    "objectives",
                    models.JSONField(
                        default=list,
                        help_text="Liste des objectifs à atteindre",
                        verbose_name="objectifs",
                    ),
                ),
                (
                    "deliverables",
                    models.JSONField(
                        default=list,
                        help_text="Ce que l'utilisateur doit produire",
                        verbose_name="livrables attendus",
                    ),
                ),
                (
                    "provided_data",
                    models.JSONField(
                        default=dict,
                        help_text="Fichiers, templates, infos nécessaires",
                        verbose_name="données fournies",
                    ),
                ),
                (
                    "templates",
                    models.JSONField(
                        default=dict,
                        help_text="Templates de départ (Excel, email, etc.)",
                        verbose_name="templates",
                    ),
                ),
                (
                    "evaluation_criteria",
                    models.JSONField(
                        default=list,
                        help_text="Liste des critères avec poids",
                        verbose_name="critères d'évaluation",
                    ),
                ),
                (
                    "time_limit_minutes",
                    models.PositiveIntegerField(
                        default=30, verbose_name="temps limite (minutes)"
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                        ],
                        default="intermediate",
                        max_length=20,
                        verbose_name="difficulté",
                    ),
                ),
                (
                    "points_reward",
                    models.PositiveIntegerField(
                        default=100, verbose_name="points récompense"
                    ),
                ),
                (
                    "total_attempts",
                    models.PositiveIntegerField(
                        default=0, verbose_name="tentatives totales"
                    ),
                ),
                (
                    "average_score",
                    models.FloatField(default=0.0, verbose_name="score moyen"),
                ),
                (
                    "average_completion_time",
                    models.PositiveIntegerField(
                        default=0, verbose_name="temps moyen (minutes)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="actif")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="créé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "simulation tâche professionnelle",
                "verbose_name_plural": "simulations tâches professionnelles",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="InterviewSimulation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "interview_type",
                    models.CharField(
                        choices=[
                            ("phone", "Entretien téléphonique"),
                            ("video", "Entretien vidéo"),
                            ("technical", "Entretien technique"),
                            ("behavioral", "Entretien comportemental"),
                            ("panel", "Panel (plusieurs recruteurs)"),
                        ],
                        default="behavioral",
                        max_length=20,
                        verbose_name="type d'entretien",
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Facile - Débutant"),
                            ("medium", "Moyen - Intermédiaire"),
                            ("hard", "Difficile - Avancé"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="difficulté",
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=15, verbose_name="durée prévue (minutes)"
                    ),
                ),
                (
                    "company_context",
                    models.JSONField(
                        default=dict,
                        help_text="Nom recruteur, culture entreprise, etc.",
                        verbose_name="contexte entreprise",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Programmée"),
                            ("in_progress", "En cours"),
                            ("completed", "Terminée"),
                            ("abandoned", "Abandonnée"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="statut",
                    ),
                ),
                (
                    "conversation",
                    models.JSONField(
                        default=list,
                        help_text="Liste des messages échangés",
                        verbose_name="conversation",
                    ),
                ),
                (
                    "overall_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="score global",
                    ),
                ),
                (
                    "detailed_scores",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Communication, technique, motivation, etc.",
                        verbose_name="scores détaillés",
                    ),
                ),
                (
                    "ai_feedback",
                    models.TextField(blank=True, verbose_name="feedback IA"),
                ),
                (
                    "strengths",
                    models.JSONField(
                        blank=True, default=list, verbose_name="points forts"
                    ),
                ),
                (
                    "improvements",
                    models.JSONField(
                        blank=True, default=list, verbose_name="axes d'amélioration"
                    ),
                ),
                (
                    "recommended_practice",
                    models.JSONField(
                        blank=True, default=list, verbose_name="pratique recommandée"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "follow_up_modules",
                    models.ManyToManyField(
                        blank=True,
                        related_name="interview_followups",
                        to="learning.microlearningmodule",
                        verbose_name="modules de suivi recommandés",
                    ),
                ),
                (
                    "opportunity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interview_simulations",
                        to="opportunities.opportunity",
                        verbose_name="opportunité",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interview_simulations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "simulation d'entretien",
                "verbose_name_plural": "simulations d'entretien",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserTaskAttempt",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "submitted_work",
                    models.JSONField(
                        default=dict,
                        help_text="Fichiers, réponses, livrables",
                        verbose_name="travail soumis",
                    ),
                ),
                (
                    "submission_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="heure de soumission"
                    ),
                ),
                (
                    "time_taken_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="temps pris (minutes)"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "En cours"),
                            ("submitted", "Soumis"),
                            ("evaluated", "Évalué"),
                            ("needs_revision", "À réviser"),
                        ],
                        default="in_progress",
                        max_length=20,
                        verbose_name="statut",
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="score",
                    ),
                ),
                (
                    "detailed_scores",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        verbose_name="scores détaillés par critère",
                    ),
                ),
                (
                    "ai_feedback",
                    models.TextField(blank=True, verbose_name="feedback IA"),
                ),
                (
                    "mentor_feedback",
                    models.TextField(blank=True, verbose_name="feedback mentor"),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="simulations.professionaltasksimulation",
                        verbose_name="tâche",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_attempts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "tentative de tâche",
                "verbose_name_plural": "tentatives de tâches",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="simulations_user_id_e2c018_idx"
                    ),
                    models.Index(
                        fields=["task", "status"], name="simulations_task_id_96901c_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="professionaltasksimulation",
            index=models.Index(
                fields=["task_type", "is_active"], name="simulations_task_ty_7867b1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="professionaltasksimulation",
            index=models.Index(
                fields=["difficulty", "is_active"],
                name="simulations_difficu_132acb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="interviewsimulation",
            index=models.Index(
                fields=["user", "status"], name="simulations_user_id_6c97f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="interviewsimulation",
            index=models.Index(
                fields=["opportunity", "status"], name="simulations_opportu_010de0_idx"
            ),
        ),
    ]
